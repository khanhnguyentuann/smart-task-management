// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// USER & AUTHENTICATION
// ==========================================

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  
  // Profile fields
  avatar       String?
  phone        String?
  bio          String?   @db.Text
  department   String?
  jobTitle     String?
  dateOfBirth  DateTime?
  gender       Gender?
  timezone     String?   @default("UTC")
  language     String?   @default("en")
  
  // Address
  street       String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  
  // Social links
  linkedinUrl  String?
  githubUrl    String?
  twitterUrl   String?
  websiteUrl   String?
  
  // Account status
  isActive     Boolean   @default(true)
  isVerified   Boolean   @default(false)
  lastLoginAt  DateTime?
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  ownedProjects    Project[]      @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  assignedTasks    Task[]         @relation("TaskAssignee")
  createdTasks     Task[]         @relation("TaskCreator")
  comments         Comment[]
  activities       Activity[]
  notifications    Notification[]
  refreshTokens    RefreshToken[]
  
  @@index([email])
  @@index([isActive])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

// ==========================================
// PROJECT MANAGEMENT
// ==========================================

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?       @db.Text
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  color       String?       @default("#3B82F6")
  icon        String?
  
  // Budget & Progress
  budget      Decimal?      @db.Decimal(10, 2)
  spent       Decimal?      @db.Decimal(10, 2) @default(0)
  progress    Int           @default(0) // 0-100
  
  // Dates
  startDate   DateTime?
  endDate     DateTime?
  completedAt DateTime?
  
  // Metadata
  tags        String[]      @default([])
  isArchived  Boolean       @default(false)
  isPublic    Boolean       @default(false)
  
  // Owner
  ownerId     String
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  milestones  Milestone[]
  documents   Document[]
  activities  Activity[]
  
  @@index([ownerId])
  @@index([status])
  @@index([isArchived])
  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(uuid())
  userId    String
  projectId String
  role      MemberRole  @default(MEMBER)
  joinedAt  DateTime    @default(now())
  
  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

// ==========================================
// TASK MANAGEMENT
// ==========================================

model Task {
  id          String     @id @default(uuid())
  projectId   String
  title       String
  description String?    @db.Text
  summary     String?    @db.Text // AI generated
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  
  // Assignment
  assigneeId  String?
  createdById String
  
  // Dates
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?
  
  // Time tracking
  estimatedHours Float?
  actualHours    Float?    @default(0)
  
  // Metadata
  tags        String[]   @default([])
  position    Int        @default(0) // For ordering
  isRecurring Boolean    @default(false)
  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy   User       @relation("TaskCreator", fields: [createdById], references: [id])
  subtasks    Task[]     @relation("TaskSubtasks")
  parentTask  Task?      @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  parentTaskId String?
  comments    Comment[]
  attachments Attachment[]
  activities  Activity[]
  
  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@map("tasks")
}

// ==========================================
// COLLABORATION
// ==========================================

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  taskId    String
  userId    String
  
  // For threaded comments
  parentId  String?
  
  // Edit tracking
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  @@index([taskId])
  @@index([userId])
  @@map("comments")
}

model Attachment {
  id         String   @id @default(uuid())
  fileName   String
  fileUrl    String
  fileSize   Int      // in bytes
  mimeType   String
  taskId     String
  uploadedBy String
  createdAt  DateTime @default(now())
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@index([taskId])
  @@map("attachments")
}

// ==========================================
// PROJECT PLANNING
// ==========================================

model Milestone {
  id          String    @id @default(uuid())
  projectId   String
  name        String
  description String?   @db.Text
  dueDate     DateTime
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@map("milestones")
}

model Document {
  id        String   @id @default(uuid())
  projectId String
  title     String
  content   String   @db.Text
  type      String   // 'doc', 'sheet', 'presentation'
  url       String?
  version   Int      @default(1)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@map("documents")
}

// ==========================================
// ACTIVITY & NOTIFICATIONS
// ==========================================

model Activity {
  id         String       @id @default(uuid())
  type       ActivityType
  entityType String       // 'project', 'task', 'comment'
  entityId   String
  projectId  String?
  userId     String
  metadata   Json?        // Store additional data
  createdAt  DateTime     @default(now())
  
  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([userId])
  @@index([entityType, entityId])
  @@map("activities")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

// ==========================================
// ENUMS
// ==========================================

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum Priority {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ActivityType {
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_DELETED
  COMMENT_ADDED
  COMMENT_UPDATED
  COMMENT_DELETED
  MEMBER_ADDED
  MEMBER_REMOVED
  FILE_UPLOADED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}