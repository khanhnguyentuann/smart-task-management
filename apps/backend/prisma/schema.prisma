// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - basic auth vá»›i role
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(MEMBER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ownedProjects Project[]     @relation("ProjectOwner")
  projectUsers  ProjectUser[]
  assignedTasks Task[]        @relation("TaskAssignee")
  createdTasks  Task[]        @relation("TaskCreator")

  @@map("users")
}

enum UserRole {
  ADMIN
  MEMBER
}

// Project model
model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner        User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  projectUsers ProjectUser[]
  tasks        Task[]

  @@index([ownerId])
  @@map("projects")
}

// ProjectUser model - many-to-many relation
model ProjectUser {
  userId    String
  projectId String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@index([projectId])
  @@index([userId])
  @@map("project_users")
}

enum ProjectRole {
  ADMIN
  MEMBER
}

// Task model
model Task {
  id          String     @id @default(uuid())
  projectId   String
  title       String
  description String?
  summary     String?    // AI generated summary
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  createdById String
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee  User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy User    @relation("TaskCreator", fields: [createdById], references: [id])

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}